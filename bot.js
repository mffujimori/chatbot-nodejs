const { Client, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const path = require('path');

// Cria√ß√£o do cliente do WhatsApp
const client = new Client();

// Evento para mostrar o QR Code para autentica√ß√£o
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

// Quando o cliente estiver pronto
client.on('ready', () => {
    console.log('Client is ready!');
});

const media = MessageMedia.fromFilePath(path.join(__dirname, 'Card√°pio Sabor Caseiro_1.png'));

const cardapio = `
üçΩÔ∏è *CARD√ÅPIO - SABOR CASEIRO*  
üï∞Ô∏è *Almo√ßo das 11:30 √†s 14:30*  

ü•ò *Pratos do Dia:*  
1Ô∏è‚É£ *Picadinho* ‚Äî R$ 40,00  
2Ô∏è‚É£ *Virado √† Paulista* ‚Äî R$ 40,00  
3Ô∏è‚É£ *Fil√© de Carne √† Parmegiana* ‚Äî R$ 40,00  
4Ô∏è‚É£ *Fil√© de Frango √† Parmegiana* ‚Äî R$ 40,00  
5Ô∏è‚É£ *Frango Assado* ‚Äî R$ 37,00  
6Ô∏è‚É£ *Frango ao Molho* ‚Äî R$ 37,00  
7Ô∏è‚É£ *Rabada* ‚Äî R$ 40,00  
8Ô∏è‚É£ *Peixe Til√°pia* ‚Äî R$ 37,00  
9Ô∏è‚É£ *Peixe Merluza* ‚Äî R$ 37,00  

üçõ *Feijoada (diversos tamanhos):*  
üîü *P (Pequena)* ‚Äî R$ 55,00  
1Ô∏è‚É£1Ô∏è‚É£ *M (M√©dia)* ‚Äî R$ 70,00  
1Ô∏è‚É£2Ô∏è‚É£ *G (Grande)* ‚Äî R$ 95,00  
1Ô∏è‚É£3Ô∏è‚É£ *GG (Fam√≠lia)* ‚Äî R$ 125,00  

üç≥ *Todos os Dias:*  
1Ô∏è‚É£4Ô∏è‚É£ *Contra Fil√©* ‚Äî R$ 45,00  
1Ô∏è‚É£5Ô∏è‚É£ *Fil√© de Frango* ‚Äî R$ 40,00  
1Ô∏è‚É£6Ô∏è‚É£ *Calabresa* ‚Äî R$ 37,00  
1Ô∏è‚É£7Ô∏è‚É£ *Omelete* ‚Äî R$ 37,00  

üí¨ *Digite *APENAS* o n√∫mero do prato desejado para fazer seu pedido!*  
üìç *Sabor Caseiro ‚Äì comida feita com amor!*

`;

const msg = 
`
‚ú®üçï *üòã Hummm... Fome de qu√™?* üòãüçï‚ú®

Ol√°! üëã Em que posso te ajudar hoje?

üî• *Confira nosso delicioso card√°pio AGORA:* üî•
üëâ [https://drive.google.com/file/d/1Eu8QEMeb1svPx3yK7uARRjHk3oedovzS/view] üëà

üòã *J√° escolheu suas del√≠cias?*

‚û°Ô∏è Digite *1* para *REALIZAR SEU PEDIDO!*
‚û°Ô∏è Digite *2* para *CONSULTAR SEUS PEDIDOS*
‚û°Ô∏è Digite *3* para *ENCERRAR A CONVERSA*

Estamos ansiosos para te servir o melhor! üòâ

`

let userState = {};

var pedidos = {};

client.on('message', async (message) => {
    const { from, body } = message;

    // Verifica se o usu√°rio j√° iniciou a intera√ß√£o ou n√£o
    if (!userState[from]) {
        await client.sendMessage(from, msg);
        await client.sendMessage(from, media);
        userState[from] = { step: 1 };
    }else if (userState[from].step === 1) {
        handleResponse1(from, body);
    }else if (userState[from].step === 2) {
        handleResponse2(from, body);
    }else if (userState[from].step === 3) {
        handleResponse3(from, body);
    }
    else {
        handleResponse1(from, body);
    }
});


const handleResponse1 = async (chatId, response) => {
    if (response === '1') {
        await client.sendMessage(chatId, 'Vamos enviar o cardapio!');
        await client.sendMessage(chatId, cardapio);
        userState[chatId] = {step: 2};
    } else if (response === '2') {
        await client.sendMessage(chatId, 'Voc√™ escolheu consultar pedidos!');
        await handleResponse4(chatId); //agora executa direto pelo handle 1
        //userState[chatId] = { step: 3 };
    } else if (response === '3') {
        await client.sendMessage(chatId, 'Conversa encerrada! Obrigado pelo contato üòä');
        delete userState[chatId]; // limpa estado para caso o usuario volte depois
        pedidos[chatId] = [];
    } else {
        await client.sendMessage(chatId, 'Op√ß√£o inv√°lida! Responda com 1 para "Realizar pedido", 2 para "Consultar pedido" ou 3 para "Encerrar conversa"!.');
    }

};

const handleResponse2 = async (chatId, response) => {
    if (!pedidos[chatId]) {
        pedidos[chatId] = [];
    }

    const cardapio = {
        '1': { item: 'Picadinho', price: 40.00 },
        '2': { item: 'Virado √† Paulista', price: 40.00 },
        '3': { item: 'Fil√© de Carne √† Parmegiana', price: 40.00 },
        '4': { item: 'Fil√© de Frango √† Parmegiana', price: 40.00 },
        '5': { item: 'Frango Assado', price: 37.00 },
        '6': { item: 'Frango ao Molho', price: 37.00 },
        '7': { item: 'Rabada', price: 40.00 },
        '8': { item: 'Peixe Til√°pia', price: 37.00 },
        '9': { item: 'Peixe Merluza', price: 37.00 },
        '10': { item: 'Feijoada (P)', price: 55.00 },
        '11': { item: 'Feijoada (M)', price: 70.00 },
        '12': { item: 'Feijoada (G)', price: 95.00 },
        '13': { item: 'Feijoada (GG)', price: 125.00 },
        '14': { item: 'Contra Fil√©', price: 45.00 },
        '15': { item: 'Fil√© de Frango', price: 40.00 },
        '16': { item: 'Calabresa', price: 37.00 },
        '17': { item: 'Omelete', price: 37.00 }
    };

    const pedido = cardapio[response];

    if (pedido) {
        await client.sendMessage(chatId, `‚úÖ Voc√™ escolheu: *${pedido.item}* ‚Äî R$ ${pedido.price.toFixed(2)}`);
        pedidos[chatId].push(pedido);
    } else {
        await client.sendMessage(chatId, '‚ùå Op√ß√£o inv√°lida, por favor digite um n√∫mero de 1 a 17.');
        return;
    }

    await handleResponse3(chatId); // mant√©m o fluxo
};

const handleResponse3 = async (chatId, response) => {
    await client.sendMessage(chatId, 'Deseja fazer outro pedido ou consultar seus pedidos?');
    await client.sendMessage(chatId, '1 - Fazer novo pedido\n2 - Consultar pedidos\n3 - Encerrar conversa');
    userState[chatId] = { step: 1 }; // volta pro menu principal aproveitando as escolhas 
};


const handleResponse4 = async (chatId) => {
    if (pedidos[chatId] && pedidos[chatId].length > 0) {
        let resposta = 'Seus pedidos s√£o:\n\n';
        let total = 0;

        pedidos[chatId].forEach((pedido, index) => {
            resposta += `Pedido ${index + 1}:\nItem: ${pedido.item}\nPre√ßo: R$${pedido.price.toFixed(2)}\n\n`;
            total += pedido.price;
        });

        await client.sendMessage(chatId, resposta);
        await client.sendMessage(chatId, `Valor Total: R$${total.toFixed(2)}`);
    } else {
        await client.sendMessage(chatId, 'Voc√™ ainda n√£o fez um pedido!');
    }

    await handleResponse3(chatId);// agora ele n√£o deleta o userstate, mantendo o fluxo
};

client.initialize();